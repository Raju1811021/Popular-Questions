#include <iostream>
#include<climits>
using namespace std;
int minDistanceVertex(int *distance,int *visited,int v){
    int m=-1;
    for(int i=0;i<v;i++){
        if(visited[i]==false && (m==-1 || distance[i]<distance[m])){
            m=i;
        }
    }
    return m;
}
void dijkistras(int **edges,int v,int e){
    int *distance=new int[v];
    int *visited=new int[v];
    for(int i=0;i<v;i++){
        distance[i]=INT_MAX;
        visited[i]=false;
    }
    distance[0]=0;
    for(int i=0;i<v;i++){
        int minVertex=minDistanceVertex(distance,visited,v);
        visited[minVertex]=true;
        for(int j=0;j<v;j++){
            if(edges[minVertex][j]!=0 && visited[j]==false){
                int minWeight=distance[minVertex]+edges[minVertex][j];
                if(minWeight<distance[j]){
                    distance[j]=minWeight;
                }
            }
        }
    }
    //print ouput
    for(int i=0;i<v;i++){
        cout<<i<<' '<<distance[i]<<endl;
    }
    // deallocate spaces
    delete [] visited;
    delete [] distance;
}
int main() {
    // Take Graph Input
    int v,e;
    cin>>v>>e;
    int **edges=new int*[v];
    for(int i=0;i<v;i++){
        edges[i]=new int[v];
        for(int j=0;j<v;j++){
            edges[i][j]=0;
        }
    }
    for(int i=0;i<e;i++){
        int s,d,w;
        cin>>s>>d>>w;
        edges[s][d]=w;
        edges[d][s]=w;
    }
    dijkistras(edges,v,e);
    //deallocate memory
    for(int i=0;i<v;i++){
        delete [] edges[i];
    }
    delete [] edges;
}
